apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'codenarc'
apply from: "$rootDir/gradle/cdeliveryboy-release.gradle"
apply plugin: "com.github.ben-manes.versions"

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            //for Plugin Publish plugin
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'info.solidsoft.gradle:cdeliveryboy:0.8.0'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2' //override version for more reliable releasing from Travis
        classpath 'com.gradle.publish:plugin-publish-plugin:0.11.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.28.0'
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    funcTest {
        java.srcDir file('src/funcTest/java')
        groovy.srcDir file('src/funcTest/groovy')
        resources.srcDir file('src/funcTest/resources')
    }
}

dependencies {
    implementation localGroovy()

    testImplementation('org.spockframework:spock-core:2.0-M2-groovy-2.5') {
        exclude group: 'org.codehaus.groovy'
    }
    //for "@Rule TemporaryFolder"
    testImplementation('org.spockframework:spock-junit4:2.0-M2-groovy-2.5') {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation 'info.solidsoft.spock:spock-global-unroll:0.5.1'
    testImplementation 'net.bytebuddy:byte-buddy:1.10.12' //for Spying in Spock

    funcTestImplementation sourceSets.main.output  //to make production plugin classes visible in functional tests (it's not in testCompile configuration)
    funcTestImplementation sourceSets.test.output
    funcTestImplementation configurations.testImplementation
    funcTestRuntimeOnly configurations.testRuntimeOnly
    funcTestImplementation('com.netflix.nebula:nebula-test:7.8.6') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

task funcTest(type: Test) {
    description = 'Run the functional tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.funcTest.output.classesDirs
    classpath = sourceSets.funcTest.runtimeClasspath
    jvmArgs '-Xmx1g'
}
funcTest.shouldRunAfter test
check.shouldRunAfter funcTest
check.dependsOn funcTestClasses     //or more generically: tasks.withType(AbstractCompile)
uploadArchives.dependsOn funcTest, check

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn test, funcTest
}

tasks.withType(Test).configureEach { testTask ->
    testTask.configure {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
        }

        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.testCount == 0) {
                    throw new IllegalStateException("No tests were found. Failing the build")
                }
            }
        }
    }
}

tasks.validateTaskProperties {
    enableStricterValidation = true
    failOnWarning = true
}

//Workaround for error with Java 14 - https://github.com/gradle/gradle/issues/12646#issuecomment-604594943
dependencies {
    constraints {
        codenarc("org.codehaus.groovy:groovy:2.5.10")
        //codenarc("org.codehaus.groovy:groovy-ant:2.5.10") --> this constraint causes NoClassDefFoundError: Lgroovy/text/TemplateEngine;
        codenarc("org.codehaus.groovy:groovy-xml:2.5.10")
    }
}

codenarc {
    toolVersion = "1.5"
}

tasks.register("codenarc") {
    configure {
        dependsOn tasks.withType(CodeNarc)
    }
}

//Workaround on https://github.com/gradle/gradle/issues/12663
tasks.withType(CodeNarc) { codeNarcTask ->
    reports {
        text.enabled = true
        html.enabled = true
    }
    codeNarcTask.finalizedBy(project.task("print${codeNarcTask.name.capitalize()}") {
        onlyIf {
            codeNarcTask.state.failure != null
        }
        doLast {
            logger.warn("\n****************************** CODE NARC ******************************")
            logger.warn(codeNarcTask.reports.text.destination.text.trim())
            logger.warn("****************************** CODE NARC ******************************\n")
        }
    })
}
