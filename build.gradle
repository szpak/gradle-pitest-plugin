apply plugin: 'groovy'
apply from: "$rootDir/gradle/cdeliveryboy-release.gradle"
apply plugin: "com.github.ben-manes.versions"

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            //for Plugin Publish plugin
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'info.solidsoft.gradle:cdeliveryboy:0.8.0'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.1' //override version for more reliable releasing from Travis
        classpath 'com.gradle.publish:plugin-publish-plugin:0.10.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.25.0'
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    funcTest {
        java.srcDir file('src/funcTest/java')
        groovy.srcDir file('src/funcTest/groovy')
        resources.srcDir file('src/funcTest/resources')
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    testImplementation('org.spockframework:spock-core:1.3-groovy-2.4') {
        //groovy 2.3.x is already provided by Gradle itself
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testImplementation 'info.solidsoft.spock:spock-global-unroll:0.5.1'
    testImplementation 'net.bytebuddy:byte-buddy:1.10.1' //for Spying in Spock
    testImplementation 'junit:junit:4.12'

    funcTestImplementation sourceSets.main.output  //to make production plugin classes visible in functional tests (it's not in testCompile configuration)
    funcTestImplementation sourceSets.test.output
    funcTestImplementation configurations.testImplementation
    funcTestRuntimeOnly configurations.testRuntimeOnly
    funcTestImplementation('com.netflix.nebula:nebula-test:7.2.5') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

task funcTest(type: Test) {
    description = 'Run the functional tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.funcTest.output.classesDirs
    classpath = sourceSets.funcTest.runtimeClasspath
    jvmArgs '-Xmx1g'
}
funcTest.shouldRunAfter test
check.shouldRunAfter funcTest
check.dependsOn funcTestClasses     //or more generically: tasks.withType(AbstractCompile)
uploadArchives.dependsOn funcTest, check

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn test, funcTest
}
